// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by Reqnroll (https://reqnroll.net/).
//      Reqnroll Version:3.0.0.0
//      Reqnroll Generator Version:3.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
using Reqnroll;
namespace PokerGame.Tests.Features
{
    
    
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class DetermineTheWinningHandFeature : object, global::Xunit.IClassFixture<DetermineTheWinningHandFeature.FixtureData>, global::Xunit.IAsyncLifetime
    {
        
        private global::Reqnroll.ITestRunner testRunner;
        
        private static string[] featureTags = ((string[])(null));
        
        private static global::Reqnroll.FeatureInfo featureInfo = new global::Reqnroll.FeatureInfo(new global::System.Globalization.CultureInfo("en"), "Features", "Determine The Winning Hand", null, global::Reqnroll.ProgrammingLanguage.CSharp, featureTags, InitializeCucumberMessages());
        
        private global::Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "PokerHands.feature"
#line hidden
        
        public DetermineTheWinningHandFeature(DetermineTheWinningHandFeature.FixtureData fixtureData, global::Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
        }
        
        public static async global::System.Threading.Tasks.Task FeatureSetupAsync()
        {
        }
        
        public static async global::System.Threading.Tasks.Task FeatureTearDownAsync()
        {
            await global::Reqnroll.TestRunnerManager.ReleaseFeatureAsync(featureInfo);
        }
        
        public async global::System.Threading.Tasks.Task TestInitializeAsync()
        {
            testRunner = global::Reqnroll.TestRunnerManager.GetTestRunnerForAssembly(featureHint: featureInfo);
            try
            {
                if (((testRunner.FeatureContext != null) 
                            && (testRunner.FeatureContext.FeatureInfo.Equals(featureInfo) == false)))
                {
                    await testRunner.OnFeatureEndAsync();
                }
            }
            finally
            {
                if (((testRunner.FeatureContext != null) 
                            && testRunner.FeatureContext.BeforeFeatureHookFailed))
                {
                    throw new global::Reqnroll.ReqnrollException("Scenario skipped because of previous before feature hook error");
                }
                if ((testRunner.FeatureContext == null))
                {
                    await testRunner.OnFeatureStartAsync(featureInfo);
                }
            }
        }
        
        public async global::System.Threading.Tasks.Task TestTearDownAsync()
        {
            if ((testRunner == null))
            {
                return;
            }
            try
            {
                await testRunner.OnScenarioEndAsync();
            }
            finally
            {
                global::Reqnroll.TestRunnerManager.ReleaseTestRunner(testRunner);
                testRunner = null;
            }
        }
        
        public void ScenarioInitialize(global::Reqnroll.ScenarioInfo scenarioInfo, global::Reqnroll.RuleInfo ruleInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo, ruleInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<global::Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public async global::System.Threading.Tasks.Task ScenarioStartAsync()
        {
            await testRunner.OnScenarioStartAsync();
        }
        
        public async global::System.Threading.Tasks.Task ScenarioCleanupAsync()
        {
            await testRunner.CollectScenarioErrorsAsync();
        }
        
        public virtual async global::System.Threading.Tasks.Task FeatureBackgroundAsync()
        {
#line 4
#line hidden
            global::Reqnroll.Table table1 = new global::Reqnroll.Table(new string[] {
                        "Rank",
                        "Card"});
            table1.AddRow(new string[] {
                        "0",
                        "2"});
            table1.AddRow(new string[] {
                        "1",
                        "3"});
            table1.AddRow(new string[] {
                        "2",
                        "4"});
            table1.AddRow(new string[] {
                        "3",
                        "5"});
            table1.AddRow(new string[] {
                        "4",
                        "6"});
            table1.AddRow(new string[] {
                        "5",
                        "7"});
            table1.AddRow(new string[] {
                        "6",
                        "8"});
            table1.AddRow(new string[] {
                        "7",
                        "9"});
            table1.AddRow(new string[] {
                        "8",
                        "Ten"});
            table1.AddRow(new string[] {
                        "9",
                        "Jack"});
            table1.AddRow(new string[] {
                        "10",
                        "Queen"});
            table1.AddRow(new string[] {
                        "11",
                        "King"});
            table1.AddRow(new string[] {
                        "12",
                        "Ace"});
#line 5
  await testRunner.GivenAsync("The cards have the following rank", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        private static global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages InitializeCucumberMessages()
        {
            return new global::Reqnroll.Formatters.RuntimeSupport.FeatureLevelCucumberMessages("Features/PokerHands.feature.ndjson", 9);
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
        {
            try
            {
                await this.TestInitializeAsync();
            }
            catch (System.Exception e1)
            {
                try
                {
                    ((global::Xunit.IAsyncLifetime)(this)).DisposeAsync();
                }
                catch (System.Exception e2)
                {
                    throw new System.AggregateException("Test initialization failed", e1, e2);
                }
                throw;
            }
        }
        
        async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
        {
            await this.TestTearDownAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="One Pair beats High Card")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Determine The Winning Hand")]
        [global::Xunit.TraitAttribute("Description", "One Pair beats High Card")]
        [global::Xunit.TraitAttribute("Category", "SimpleTests")]
        public async global::System.Threading.Tasks.Task OnePairBeatsHighCard()
        {
            string[] tagsOfScenario = new string[] {
                    "SimpleTests"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "0";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("One Pair beats High Card", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 21
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table2 = new global::Reqnroll.Table(new string[] {
                            "HandNo",
                            "Card1_Value",
                            "Card1_Suit",
                            "Card2_Value",
                            "Card2_Suit",
                            "Card3_Value",
                            "Card3_Suit",
                            "Card4_Value",
                            "Card4_Suit",
                            "Card5_Value",
                            "Card5_Suit"});
                table2.AddRow(new string[] {
                            "1",
                            "Two",
                            "Spade",
                            "Two",
                            "Heart",
                            "Five",
                            "Diamond",
                            "Seven",
                            "Club",
                            "Nine",
                            "Spade"});
                table2.AddRow(new string[] {
                            "2",
                            "Ace",
                            "Spade",
                            "King",
                            "Heart",
                            "Ten",
                            "Diamond",
                            "Eight",
                            "Club",
                            "Three",
                            "Spade"});
#line 22
  await testRunner.GivenAsync("I have the following hands", ((string)(null)), table2, "Given ");
#line hidden
#line 26
  await testRunner.WhenAsync("I Score the Hands", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 27
  await testRunner.ThenAsync("HandNo 1 should have a \"One Pair with High Card Two\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 28
  await testRunner.AndAsync("HandNo 2 should have a \"High Card with High Card Ace\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 29
  await testRunner.AndAsync("The result of the game should be \"Winning Hand: 1 with One Pair with High Card Tw" +
                        "o\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Three of a Kind beats all lower hands")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Determine The Winning Hand")]
        [global::Xunit.TraitAttribute("Description", "Three of a Kind beats all lower hands")]
        [global::Xunit.TraitAttribute("Category", "SimpleTests")]
        public async global::System.Threading.Tasks.Task ThreeOfAKindBeatsAllLowerHands()
        {
            string[] tagsOfScenario = new string[] {
                    "SimpleTests"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "1";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Three of a Kind beats all lower hands", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 32
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table3 = new global::Reqnroll.Table(new string[] {
                            "HandNo",
                            "Card1_Value",
                            "Card1_Suit",
                            "Card2_Value",
                            "Card2_Suit",
                            "Card3_Value",
                            "Card3_Suit",
                            "Card4_Value",
                            "Card4_Suit",
                            "Card5_Value",
                            "Card5_Suit"});
                table3.AddRow(new string[] {
                            "1",
                            "Four",
                            "Spade",
                            "Four",
                            "Heart",
                            "Four",
                            "Diamond",
                            "Nine",
                            "Club",
                            "King",
                            "Spade"});
                table3.AddRow(new string[] {
                            "2",
                            "Eight",
                            "Spade",
                            "Eight",
                            "Heart",
                            "King",
                            "Diamond",
                            "King",
                            "Club",
                            "Two",
                            "Spade"});
                table3.AddRow(new string[] {
                            "3",
                            "Ace",
                            "Spade",
                            "King",
                            "Heart",
                            "Queen",
                            "Diamond",
                            "Jack",
                            "Club",
                            "Nine",
                            "Spade"});
                table3.AddRow(new string[] {
                            "4",
                            "Two",
                            "Spade",
                            "Two",
                            "Heart",
                            "Five",
                            "Diamond",
                            "Seven",
                            "Club",
                            "Nine",
                            "Spade"});
                table3.AddRow(new string[] {
                            "5",
                            "Ten",
                            "Spade",
                            "Jack",
                            "Heart",
                            "Queen",
                            "Diamond",
                            "King",
                            "Club",
                            "Ace",
                            "Spade"});
#line 33
  await testRunner.GivenAsync("I have the following hands", ((string)(null)), table3, "Given ");
#line hidden
#line 40
  await testRunner.WhenAsync("I Score the Hands", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 41
  await testRunner.ThenAsync("HandNo 1 should have a \"Three of a Kind with High Card Four\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 42
  await testRunner.AndAsync("HandNo 2 should have a \"Two Pairs with High Card King\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 43
  await testRunner.AndAsync("HandNo 3 should have a \"High Card with High Card Ace\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 44
  await testRunner.AndAsync("HandNo 4 should have a \"One Pair with High Card Two\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 45
  await testRunner.AndAsync("HandNo 5 should have a \"Straight with High Card Ace\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 46
  await testRunner.AndAsync("The result of the game should be \"Winning Hand: 5 with Straight with High Card Ac" +
                        "e\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Player with Royal Flush should win the game")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Determine The Winning Hand")]
        [global::Xunit.TraitAttribute("Description", "Player with Royal Flush should win the game")]
        [global::Xunit.TraitAttribute("Category", "RankTests")]
        public async global::System.Threading.Tasks.Task PlayerWithRoyalFlushShouldWinTheGame()
        {
            string[] tagsOfScenario = new string[] {
                    "RankTests"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "2";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Player with Royal Flush should win the game", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 49
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table4 = new global::Reqnroll.Table(new string[] {
                            "HandNo",
                            "Card1_Value",
                            "Card1_Suit",
                            "Card2_Value",
                            "Card2_Suit",
                            "Card3_Value",
                            "Card3_Suit",
                            "Card4_Value",
                            "Card4_Suit",
                            "Card5_Value",
                            "Card5_Suit"});
                table4.AddRow(new string[] {
                            "1",
                            "Ten",
                            "Heart",
                            "Jack",
                            "Heart",
                            "Queen",
                            "Heart",
                            "King",
                            "Heart",
                            "Ace",
                            "Heart"});
                table4.AddRow(new string[] {
                            "2",
                            "Two",
                            "Heart",
                            "Three",
                            "Heart",
                            "Four",
                            "Heart",
                            "Five",
                            "Heart",
                            "Six",
                            "Heart"});
#line 50
  await testRunner.GivenAsync("I have the following hands", ((string)(null)), table4, "Given ");
#line hidden
#line 54
  await testRunner.WhenAsync("I Score the Hands", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 55
  await testRunner.ThenAsync("HandNo 1 should have a \"Royal Flush with High Card Ace\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 56
  await testRunner.AndAsync("HandNo 2 should have a \"Straight Flush with High Card Six\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 57
  await testRunner.AndAsync("The result of the game should be \"Winning Hand: 1 with Royal Flush with High Card" +
                        " Ace\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Player with Four of a Kind should beat Full House")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Determine The Winning Hand")]
        [global::Xunit.TraitAttribute("Description", "Player with Four of a Kind should beat Full House")]
        [global::Xunit.TraitAttribute("Category", "RankTests")]
        public async global::System.Threading.Tasks.Task PlayerWithFourOfAKindShouldBeatFullHouse()
        {
            string[] tagsOfScenario = new string[] {
                    "RankTests"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "3";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Player with Four of a Kind should beat Full House", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 60
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table5 = new global::Reqnroll.Table(new string[] {
                            "HandNo",
                            "Card1_Value",
                            "Card1_Suit",
                            "Card2_Value",
                            "Card2_Suit",
                            "Card3_Value",
                            "Card3_Suit",
                            "Card4_Value",
                            "Card4_Suit",
                            "Card5_Value",
                            "Card5_Suit"});
                table5.AddRow(new string[] {
                            "1",
                            "Nine",
                            "Spade",
                            "Nine",
                            "Heart",
                            "Nine",
                            "Diamond",
                            "Nine",
                            "Club",
                            "King",
                            "Spade"});
                table5.AddRow(new string[] {
                            "2",
                            "Eight",
                            "Spade",
                            "Eight",
                            "Heart",
                            "Eight",
                            "Diamond",
                            "Two",
                            "Club",
                            "Two",
                            "Spade"});
#line 61
  await testRunner.GivenAsync("I have the following hands", ((string)(null)), table5, "Given ");
#line hidden
#line 65
  await testRunner.WhenAsync("I Score the Hands", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 66
  await testRunner.ThenAsync("HandNo 1 should have a \"Four of a Kind with High Card Nine\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 67
  await testRunner.AndAsync("HandNo 2 should have a \"Full House with High Card Eight\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 68
  await testRunner.AndAsync("The result of the game should be \"Winning Hand: 1 with Four of a Kind with High C" +
                        "ard Nine\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Tie-breaker with same rank and different high card")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Determine The Winning Hand")]
        [global::Xunit.TraitAttribute("Description", "Tie-breaker with same rank and different high card")]
        [global::Xunit.TraitAttribute("Category", "TieBreakerTests")]
        public async global::System.Threading.Tasks.Task Tie_BreakerWithSameRankAndDifferentHighCard()
        {
            string[] tagsOfScenario = new string[] {
                    "TieBreakerTests"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "4";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Tie-breaker with same rank and different high card", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 71
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table6 = new global::Reqnroll.Table(new string[] {
                            "HandNo",
                            "Card1_Value",
                            "Card1_Suit",
                            "Card2_Value",
                            "Card2_Suit",
                            "Card3_Value",
                            "Card3_Suit",
                            "Card4_Value",
                            "Card4_Suit",
                            "Card5_Value",
                            "Card5_Suit"});
                table6.AddRow(new string[] {
                            "1",
                            "Ten",
                            "Spade",
                            "Jack",
                            "Heart",
                            "Queen",
                            "Diamond",
                            "King",
                            "Club",
                            "Ace",
                            "Spade"});
                table6.AddRow(new string[] {
                            "2",
                            "Nine",
                            "Spade",
                            "Ten",
                            "Heart",
                            "Jack",
                            "Diamond",
                            "Queen",
                            "Club",
                            "King",
                            "Spade"});
#line 72
  await testRunner.GivenAsync("I have the following hands", ((string)(null)), table6, "Given ");
#line hidden
#line 76
  await testRunner.WhenAsync("I Score the Hands", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 77
  await testRunner.ThenAsync("HandNo 1 should have a \"Straight with High Card Ace\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 78
  await testRunner.AndAsync("HandNo 2 should have a \"Straight with High Card King\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 79
  await testRunner.AndAsync("The result of the game should be \"Winning Hand: 1 with Straight with High Card Ac" +
                        "e\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Three players with different ranks")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Determine The Winning Hand")]
        [global::Xunit.TraitAttribute("Description", "Three players with different ranks")]
        [global::Xunit.TraitAttribute("Category", "MultiPlayerTests")]
        public async global::System.Threading.Tasks.Task ThreePlayersWithDifferentRanks()
        {
            string[] tagsOfScenario = new string[] {
                    "MultiPlayerTests"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "5";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Three players with different ranks", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 82
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table7 = new global::Reqnroll.Table(new string[] {
                            "HandNo",
                            "Card1_Value",
                            "Card1_Suit",
                            "Card2_Value",
                            "Card2_Suit",
                            "Card3_Value",
                            "Card3_Suit",
                            "Card4_Value",
                            "Card4_Suit",
                            "Card5_Value",
                            "Card5_Suit"});
                table7.AddRow(new string[] {
                            "1",
                            "Ten",
                            "Spade",
                            "Jack",
                            "Heart",
                            "Queen",
                            "Diamond",
                            "King",
                            "Club",
                            "Ace",
                            "Spade"});
                table7.AddRow(new string[] {
                            "2",
                            "Two",
                            "Spade",
                            "Two",
                            "Heart",
                            "Five",
                            "Diamond",
                            "Seven",
                            "Club",
                            "Nine",
                            "Spade"});
                table7.AddRow(new string[] {
                            "3",
                            "Eight",
                            "Spade",
                            "Eight",
                            "Heart",
                            "Eight",
                            "Diamond",
                            "King",
                            "Club",
                            "King",
                            "Spade"});
#line 83
  await testRunner.GivenAsync("I have the following hands", ((string)(null)), table7, "Given ");
#line hidden
#line 88
  await testRunner.WhenAsync("I Score the Hands", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 89
  await testRunner.ThenAsync("HandNo 1 should have a \"Straight with High Card Ace\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 90
  await testRunner.AndAsync("HandNo 2 should have a \"One Pair with High Card Two\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 91
  await testRunner.AndAsync("HandNo 3 should have a \"Full House with High Card Eight\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 92
  await testRunner.AndAsync("The result of the game should be \"Winning Hand: 3 with Full House with High Card " +
                        "Eight\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::Xunit.SkippableFactAttribute(DisplayName="Royal Flush beats all other hands")]
        [global::Xunit.TraitAttribute("FeatureTitle", "Determine The Winning Hand")]
        [global::Xunit.TraitAttribute("Description", "Royal Flush beats all other hands")]
        [global::Xunit.TraitAttribute("Category", "MultiPlayerTests")]
        public async global::System.Threading.Tasks.Task RoyalFlushBeatsAllOtherHands()
        {
            string[] tagsOfScenario = new string[] {
                    "MultiPlayerTests"};
            global::System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new global::System.Collections.Specialized.OrderedDictionary();
            string pickleIndex = "6";
            global::Reqnroll.ScenarioInfo scenarioInfo = new global::Reqnroll.ScenarioInfo("Royal Flush beats all other hands", null, tagsOfScenario, argumentsOfScenario, featureTags, pickleIndex);
            string[] tagsOfRule = ((string[])(null));
            global::Reqnroll.RuleInfo ruleInfo = null;
#line 95
this.ScenarioInitialize(scenarioInfo, ruleInfo);
#line hidden
            if ((global::Reqnroll.TagHelper.ContainsIgnoreTag(scenarioInfo.CombinedTags) || global::Reqnroll.TagHelper.ContainsIgnoreTag(featureTags)))
            {
                await testRunner.SkipScenarioAsync();
            }
            else
            {
                await this.ScenarioStartAsync();
#line 4
await this.FeatureBackgroundAsync();
#line hidden
                global::Reqnroll.Table table8 = new global::Reqnroll.Table(new string[] {
                            "HandNo",
                            "Card1_Value",
                            "Card1_Suit",
                            "Card2_Value",
                            "Card2_Suit",
                            "Card3_Value",
                            "Card3_Suit",
                            "Card4_Value",
                            "Card4_Suit",
                            "Card5_Value",
                            "Card5_Suit"});
                table8.AddRow(new string[] {
                            "1",
                            "Ten",
                            "Heart",
                            "Jack",
                            "Heart",
                            "Queen",
                            "Heart",
                            "King",
                            "Heart",
                            "Ace",
                            "Heart"});
                table8.AddRow(new string[] {
                            "2",
                            "Two",
                            "Heart",
                            "Three",
                            "Heart",
                            "Four",
                            "Heart",
                            "Five",
                            "Heart",
                            "Six",
                            "Heart"});
                table8.AddRow(new string[] {
                            "3",
                            "Nine",
                            "Spade",
                            "Nine",
                            "Heart",
                            "Nine",
                            "Diamond",
                            "Nine",
                            "Club",
                            "King",
                            "Spade"});
                table8.AddRow(new string[] {
                            "4",
                            "Eight",
                            "Spade",
                            "Eight",
                            "Heart",
                            "Eight",
                            "Diamond",
                            "King",
                            "Club",
                            "King",
                            "Spade"});
#line 96
  await testRunner.GivenAsync("I have the following hands", ((string)(null)), table8, "Given ");
#line hidden
#line 102
  await testRunner.WhenAsync("I Score the Hands", ((string)(null)), ((global::Reqnroll.Table)(null)), "When ");
#line hidden
#line 103
  await testRunner.ThenAsync("HandNo 1 should have a \"Royal Flush with High Card Ace\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "Then ");
#line hidden
#line 104
  await testRunner.AndAsync("HandNo 2 should have a \"Straight Flush with High Card Six\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 105
  await testRunner.AndAsync("HandNo 3 should have a \"Four of a Kind with High Card Nine\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 106
  await testRunner.AndAsync("HandNo 4 should have a \"Full House with High Card Eight\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
#line 107
  await testRunner.AndAsync("The result of the game should be \"Winning Hand: 1 with Royal Flush with High Card" +
                        " Ace\"", ((string)(null)), ((global::Reqnroll.Table)(null)), "And ");
#line hidden
            }
            await this.ScenarioCleanupAsync();
        }
        
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Reqnroll", "3.0.0.0")]
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : object, global::Xunit.IAsyncLifetime
        {
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.InitializeAsync()
            {
                await DetermineTheWinningHandFeature.FeatureSetupAsync();
            }
            
            async global::System.Threading.Tasks.Task global::Xunit.IAsyncLifetime.DisposeAsync()
            {
                await DetermineTheWinningHandFeature.FeatureTearDownAsync();
            }
        }
    }
}
#pragma warning restore
#endregion
